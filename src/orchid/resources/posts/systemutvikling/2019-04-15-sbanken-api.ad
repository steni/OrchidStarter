+++
title = "Sbansk: Styr egne konti med Sbanken API"
featuredImage = "assets/media/sbanken_vennlig_rebell.jpg"
tags= "systemutvikling"
+++

== Sbansk: Styr egne konti med Sbanken API
*Nye regler skaper muligheter for oppkomlinger innen finansteknologi (fintech). Det er duket for at PSD2 (EUs "Revised
Payment Service Directive") vil føre til store endringer når det gjelder tradisjonelle bank-tjenester. (1)*

Når bankene tvinges til å åpne for at tredjeparter ikke bare kan få hente det som før har vært høyt skattede
data, men også kan få utføre tjenester på kundens vegne, skapes grobunn for ny utvikling og ny verdiskapning.

=== Hvordan får du tilgang til banken?
Bankene lager åpne APIer, disse utgjør en plattform som både gir tredjeparter tilgang til data, og til å utføre handlinger
på kundenes vegne (2).

Sbanken var tidlig ute med å tilgjengjeliggjøre et knippe tjenester via et nytt API (3). Disse er i dag begrenset
slik at du kan se egne konti og transaksjoner, og utføre overføringer mellom egne konti.

Teknomade presenterer i dag Sbansk, et bibliotek som gjør det enkelt for utviklere å komme i gang å bruke Sbanskens API.

=== Slik snakker du Sbansk

[source,java]
 Sbansk client = new Sbansk();
 Accounts accounts = client.getAccounts();

Nå inneholder objektet __accounts__ informasjon om alle dine konti. Du kan hente en spesifik konto basert på dens
navn.

[source,java]
 Account.Name LONN = Account.Name.nameFor("Lønn");
 BigDecimal balance = client.getBalance(LONN);

Om du vil vite hvor mye du har på alle konti til sammen:

[source,java]
 BigDecimal sumOfBalances = client.getSumOfBalances();

Og du overfører mellom konti ved å:

[source,java]
 Account.Name LONN = Account.Name.nameFor("Lønn");
 Account.Name BRUKSKONTO = Account.Name.nameFor("Brukskonto");
 Account from = client.getAccount(LONN);
 Account to = client.getAccount(BRUKSKONTO);
 Transfer.Response response = client
                    .execute(
                            Transfer
                                .amount(1.99)
                                .from(from)
                                .to(to)
                                .description("Test api"));
  assert(response.status == Transfer.Response.Status.OK);

Du kan også spesifisere predikater som avgjør om en transaksjon skal finne sted:

[source,java]
 Transfer transfer = Transfer.amount(AMOUNT).from(a).to(b).description("Test").iff(a.balanceGT, 1000);
 Transfer.Response response = client.execute(transfer);

Her sier du at transaksjonen kun skal utføres om balansen på konto "a" er større enn 1000.

Du kan legge til så mange predikater du vil. For eksempel: Overfør kr 300 fra konto a til konto b, om det står mer enn
kr 1000 på a og mindre enn kr 10 på b:

[source,java]
 Transfer transfer = Transfer.amount(300).from(a).to(b).description("Utbytteparty")
                        .iff(a.balanceGT, 1000)
                        .and(b.balanceLT, 10);

__Predicate__ er et funksjonelt interface, og du står fritt til å definere dine egne. Som du ser av eksempelet, har
klassen __Account__ definert "greater than" og "less than". I tillegg har den "equals".

Å definere egne predikater er enkelt:

[source,java]
  Predicate<BigDecimal> balanceGT = balance -> (balance.compareTo(this.getBalance()) < 0);
  Predicate<BigDecimal> balanceLT = balance -> (balance.compareTo(this.getBalance()) > 0);
  Predicate<BigDecimal> balanceEQ = balance -> (balance.compareTo(this.getBalance()) == 0);

Alle predikater definert på en transaksjon blir evaluert før transaksjonen eventuelt finner sted. Om __ikke__ alle
predikater er oppfylt, får du følgende respons:

[source,java]
 Transfer.Response response = client.execute(transfer);
 assert response == Transfer.Response.CONDITIONS_NOT_SATISFIED;

=== Slik kommer du raskt i gang
1. Klon koden fra GitHub: git clone git@github.com:steni/Sbansk.git

2. Registrer deg som bruker av Sbankens __betabank__. Følg instruksjonene på
https://sbanken.no/bruke/utviklerportalen/[Utviklerportalen, window="_blank"].

3. Når du har gjort det, vil du ha fått en __clientId__ og en __secret__ fra Sbanken, som sammen med ditt fødselsnummer
vil gi deg tilgangen du skal ha.

4. Under src/main/resources finner du filen template.properties. Fyll inn din client id, secret og fødseselsnummer (SSN),
og døp filen om til default.properties.

5. Nå kan du for eksempel kjøre ExampleApplication -- husk å endre navnet på kontoen i koden til navnet på en konto du eier.

6. Ta også en titt på alle testene under src/test. De er skrevet i Groovy / Spock, og skal være enkle å forstå.


== Kilder
(1) Finans Norge - https://www.finansnorge.no/tema/bank/psd2-eller-betalingstjenestedirektivet/ - hentet 2019-04-18

(2) Wikipedia - https://en.wikipedia.org/wiki/Open_banking - hentet 2019-04-18

(3) Sbanken - https://sbanken.no/bruke/utviklerportalen/ - hentet 2019-04-18